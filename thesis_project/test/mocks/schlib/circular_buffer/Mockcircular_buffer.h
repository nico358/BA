/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCIRCULAR_BUFFER_H
#define _MOCKCIRCULAR_BUFFER_H

#include "unity.h"
#include "lib/circular_buffer/circular_buffer.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcircular_buffer_Init(void);
void Mockcircular_buffer_Destroy(void);
void Mockcircular_buffer_Verify(void);




#define circBufInit_Ignore() circBufInit_CMockIgnore()
void circBufInit_CMockIgnore(void);
#define circBufInit_ExpectAnyArgs() circBufInit_CMockExpectAnyArgs(__LINE__)
void circBufInit_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define circBufInit_Expect(c, size) circBufInit_CMockExpect(__LINE__, c, size)
void circBufInit_CMockExpect(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t size);
typedef void (* CMOCK_circBufInit_CALLBACK)(circularBuffer* c, uint16_t size, int cmock_num_calls);
void circBufInit_StubWithCallback(CMOCK_circBufInit_CALLBACK Callback);
#define circBufInit_ExpectAndThrow(c, size, cmock_to_throw) circBufInit_CMockExpectAndThrow(__LINE__, c, size, cmock_to_throw)
void circBufInit_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t size, CEXCEPTION_T cmock_to_throw);
#define circBufInit_ExpectWithArray(c, c_Depth, size) circBufInit_CMockExpectWithArray(__LINE__, c, c_Depth, size)
void circBufInit_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int c_Depth, uint16_t size);
#define circBufInit_ReturnThruPtr_c(c) circBufInit_CMockReturnMemThruPtr_c(__LINE__, c, sizeof(*c))
#define circBufInit_ReturnArrayThruPtr_c(c, cmock_len) circBufInit_CMockReturnMemThruPtr_c(__LINE__, c, (int)(cmock_len * (int)sizeof(*c)))
#define circBufInit_ReturnMemThruPtr_c(c, cmock_size) circBufInit_CMockReturnMemThruPtr_c(__LINE__, c, cmock_size)
void circBufInit_CMockReturnMemThruPtr_c(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int cmock_size);
#define circBufInit_IgnoreArg_c() circBufInit_CMockIgnoreArg_c(__LINE__)
void circBufInit_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define circBufInit_IgnoreArg_size() circBufInit_CMockIgnoreArg_size(__LINE__)
void circBufInit_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define circBufFree_Ignore() circBufFree_CMockIgnore()
void circBufFree_CMockIgnore(void);
#define circBufFree_ExpectAnyArgs() circBufFree_CMockExpectAnyArgs(__LINE__)
void circBufFree_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define circBufFree_Expect(c) circBufFree_CMockExpect(__LINE__, c)
void circBufFree_CMockExpect(UNITY_LINE_TYPE cmock_line, circularBuffer* c);
typedef void (* CMOCK_circBufFree_CALLBACK)(circularBuffer* c, int cmock_num_calls);
void circBufFree_StubWithCallback(CMOCK_circBufFree_CALLBACK Callback);
#define circBufFree_ExpectAndThrow(c, cmock_to_throw) circBufFree_CMockExpectAndThrow(__LINE__, c, cmock_to_throw)
void circBufFree_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, circularBuffer* c, CEXCEPTION_T cmock_to_throw);
#define circBufFree_ExpectWithArray(c, c_Depth) circBufFree_CMockExpectWithArray(__LINE__, c, c_Depth)
void circBufFree_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int c_Depth);
#define circBufFree_ReturnThruPtr_c(c) circBufFree_CMockReturnMemThruPtr_c(__LINE__, c, sizeof(*c))
#define circBufFree_ReturnArrayThruPtr_c(c, cmock_len) circBufFree_CMockReturnMemThruPtr_c(__LINE__, c, (int)(cmock_len * (int)sizeof(*c)))
#define circBufFree_ReturnMemThruPtr_c(c, cmock_size) circBufFree_CMockReturnMemThruPtr_c(__LINE__, c, cmock_size)
void circBufFree_CMockReturnMemThruPtr_c(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int cmock_size);
#define circBufFree_IgnoreArg_c() circBufFree_CMockIgnoreArg_c(__LINE__)
void circBufFree_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define circBufSpace_IgnoreAndReturn(cmock_retval) circBufSpace_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void circBufSpace_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define circBufSpace_ExpectAnyArgsAndReturn(cmock_retval) circBufSpace_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void circBufSpace_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define circBufSpace_ExpectAndReturn(c, cmock_retval) circBufSpace_CMockExpectAndReturn(__LINE__, c, cmock_retval)
void circBufSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_circBufSpace_CALLBACK)(circularBuffer* c, int cmock_num_calls);
void circBufSpace_StubWithCallback(CMOCK_circBufSpace_CALLBACK Callback);
#define circBufSpace_ExpectAndThrow(c, cmock_to_throw) circBufSpace_CMockExpectAndThrow(__LINE__, c, cmock_to_throw)
void circBufSpace_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, circularBuffer* c, CEXCEPTION_T cmock_to_throw);
#define circBufSpace_ExpectWithArrayAndReturn(c, c_Depth, cmock_retval) circBufSpace_CMockExpectWithArrayAndReturn(__LINE__, c, c_Depth, cmock_retval)
void circBufSpace_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int c_Depth, uint16_t cmock_to_return);
#define circBufSpace_ReturnThruPtr_c(c) circBufSpace_CMockReturnMemThruPtr_c(__LINE__, c, sizeof(*c))
#define circBufSpace_ReturnArrayThruPtr_c(c, cmock_len) circBufSpace_CMockReturnMemThruPtr_c(__LINE__, c, (int)(cmock_len * (int)sizeof(*c)))
#define circBufSpace_ReturnMemThruPtr_c(c, cmock_size) circBufSpace_CMockReturnMemThruPtr_c(__LINE__, c, cmock_size)
void circBufSpace_CMockReturnMemThruPtr_c(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int cmock_size);
#define circBufSpace_IgnoreArg_c() circBufSpace_CMockIgnoreArg_c(__LINE__)
void circBufSpace_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define circBufCount_IgnoreAndReturn(cmock_retval) circBufCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void circBufCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define circBufCount_ExpectAnyArgsAndReturn(cmock_retval) circBufCount_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void circBufCount_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define circBufCount_ExpectAndReturn(c, cmock_retval) circBufCount_CMockExpectAndReturn(__LINE__, c, cmock_retval)
void circBufCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_circBufCount_CALLBACK)(circularBuffer* c, int cmock_num_calls);
void circBufCount_StubWithCallback(CMOCK_circBufCount_CALLBACK Callback);
#define circBufCount_ExpectAndThrow(c, cmock_to_throw) circBufCount_CMockExpectAndThrow(__LINE__, c, cmock_to_throw)
void circBufCount_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, circularBuffer* c, CEXCEPTION_T cmock_to_throw);
#define circBufCount_ExpectWithArrayAndReturn(c, c_Depth, cmock_retval) circBufCount_CMockExpectWithArrayAndReturn(__LINE__, c, c_Depth, cmock_retval)
void circBufCount_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int c_Depth, uint16_t cmock_to_return);
#define circBufCount_ReturnThruPtr_c(c) circBufCount_CMockReturnMemThruPtr_c(__LINE__, c, sizeof(*c))
#define circBufCount_ReturnArrayThruPtr_c(c, cmock_len) circBufCount_CMockReturnMemThruPtr_c(__LINE__, c, (int)(cmock_len * (int)sizeof(*c)))
#define circBufCount_ReturnMemThruPtr_c(c, cmock_size) circBufCount_CMockReturnMemThruPtr_c(__LINE__, c, cmock_size)
void circBufCount_CMockReturnMemThruPtr_c(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int cmock_size);
#define circBufCount_IgnoreArg_c() circBufCount_CMockIgnoreArg_c(__LINE__)
void circBufCount_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define circBufCountObjects_IgnoreAndReturn(cmock_retval) circBufCountObjects_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void circBufCountObjects_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define circBufCountObjects_ExpectAnyArgsAndReturn(cmock_retval) circBufCountObjects_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void circBufCountObjects_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define circBufCountObjects_ExpectAndReturn(c, size, cmock_retval) circBufCountObjects_CMockExpectAndReturn(__LINE__, c, size, cmock_retval)
void circBufCountObjects_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t size, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_circBufCountObjects_CALLBACK)(circularBuffer* c, uint16_t size, int cmock_num_calls);
void circBufCountObjects_StubWithCallback(CMOCK_circBufCountObjects_CALLBACK Callback);
#define circBufCountObjects_ExpectAndThrow(c, size, cmock_to_throw) circBufCountObjects_CMockExpectAndThrow(__LINE__, c, size, cmock_to_throw)
void circBufCountObjects_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t size, CEXCEPTION_T cmock_to_throw);
#define circBufCountObjects_ExpectWithArrayAndReturn(c, c_Depth, size, cmock_retval) circBufCountObjects_CMockExpectWithArrayAndReturn(__LINE__, c, c_Depth, size, cmock_retval)
void circBufCountObjects_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int c_Depth, uint16_t size, uint16_t cmock_to_return);
#define circBufCountObjects_ReturnThruPtr_c(c) circBufCountObjects_CMockReturnMemThruPtr_c(__LINE__, c, sizeof(*c))
#define circBufCountObjects_ReturnArrayThruPtr_c(c, cmock_len) circBufCountObjects_CMockReturnMemThruPtr_c(__LINE__, c, (int)(cmock_len * (int)sizeof(*c)))
#define circBufCountObjects_ReturnMemThruPtr_c(c, cmock_size) circBufCountObjects_CMockReturnMemThruPtr_c(__LINE__, c, cmock_size)
void circBufCountObjects_CMockReturnMemThruPtr_c(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int cmock_size);
#define circBufCountObjects_IgnoreArg_c() circBufCountObjects_CMockIgnoreArg_c(__LINE__)
void circBufCountObjects_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define circBufCountObjects_IgnoreArg_size() circBufCountObjects_CMockIgnoreArg_size(__LINE__)
void circBufCountObjects_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define circBufPush_IgnoreAndReturn(cmock_retval) circBufPush_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void circBufPush_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define circBufPush_ExpectAnyArgsAndReturn(cmock_retval) circBufPush_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void circBufPush_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define circBufPush_ExpectAndReturn(c, data, cmock_retval) circBufPush_CMockExpectAndReturn(__LINE__, c, data, cmock_retval)
void circBufPush_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint8_t data, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_circBufPush_CALLBACK)(circularBuffer* c, uint8_t data, int cmock_num_calls);
void circBufPush_StubWithCallback(CMOCK_circBufPush_CALLBACK Callback);
#define circBufPush_ExpectAndThrow(c, data, cmock_to_throw) circBufPush_CMockExpectAndThrow(__LINE__, c, data, cmock_to_throw)
void circBufPush_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint8_t data, CEXCEPTION_T cmock_to_throw);
#define circBufPush_ExpectWithArrayAndReturn(c, c_Depth, data, cmock_retval) circBufPush_CMockExpectWithArrayAndReturn(__LINE__, c, c_Depth, data, cmock_retval)
void circBufPush_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int c_Depth, uint8_t data, uint8_t cmock_to_return);
#define circBufPush_ReturnThruPtr_c(c) circBufPush_CMockReturnMemThruPtr_c(__LINE__, c, sizeof(*c))
#define circBufPush_ReturnArrayThruPtr_c(c, cmock_len) circBufPush_CMockReturnMemThruPtr_c(__LINE__, c, (int)(cmock_len * (int)sizeof(*c)))
#define circBufPush_ReturnMemThruPtr_c(c, cmock_size) circBufPush_CMockReturnMemThruPtr_c(__LINE__, c, cmock_size)
void circBufPush_CMockReturnMemThruPtr_c(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int cmock_size);
#define circBufPush_IgnoreArg_c() circBufPush_CMockIgnoreArg_c(__LINE__)
void circBufPush_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define circBufPush_IgnoreArg_data() circBufPush_CMockIgnoreArg_data(__LINE__)
void circBufPush_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define circBufPop_IgnoreAndReturn(cmock_retval) circBufPop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void circBufPop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define circBufPop_ExpectAnyArgsAndReturn(cmock_retval) circBufPop_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void circBufPop_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define circBufPop_ExpectAndReturn(c, data, cmock_retval) circBufPop_CMockExpectAndReturn(__LINE__, c, data, cmock_retval)
void circBufPop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint8_t* data, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_circBufPop_CALLBACK)(circularBuffer* c, uint8_t* data, int cmock_num_calls);
void circBufPop_StubWithCallback(CMOCK_circBufPop_CALLBACK Callback);
#define circBufPop_ExpectAndThrow(c, data, cmock_to_throw) circBufPop_CMockExpectAndThrow(__LINE__, c, data, cmock_to_throw)
void circBufPop_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint8_t* data, CEXCEPTION_T cmock_to_throw);
#define circBufPop_ExpectWithArrayAndReturn(c, c_Depth, data, data_Depth, cmock_retval) circBufPop_CMockExpectWithArrayAndReturn(__LINE__, c, c_Depth, data, data_Depth, cmock_retval)
void circBufPop_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int c_Depth, uint8_t* data, int data_Depth, uint8_t cmock_to_return);
#define circBufPop_ReturnThruPtr_c(c) circBufPop_CMockReturnMemThruPtr_c(__LINE__, c, sizeof(*c))
#define circBufPop_ReturnArrayThruPtr_c(c, cmock_len) circBufPop_CMockReturnMemThruPtr_c(__LINE__, c, (int)(cmock_len * (int)sizeof(*c)))
#define circBufPop_ReturnMemThruPtr_c(c, cmock_size) circBufPop_CMockReturnMemThruPtr_c(__LINE__, c, cmock_size)
void circBufPop_CMockReturnMemThruPtr_c(UNITY_LINE_TYPE cmock_line, circularBuffer* c, int cmock_size);
#define circBufPop_ReturnThruPtr_data(data) circBufPop_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(*data))
#define circBufPop_ReturnArrayThruPtr_data(data, cmock_len) circBufPop_CMockReturnMemThruPtr_data(__LINE__, data, (int)(cmock_len * (int)sizeof(*data)))
#define circBufPop_ReturnMemThruPtr_data(data, cmock_size) circBufPop_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void circBufPop_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, uint8_t* data, int cmock_size);
#define circBufPop_IgnoreArg_c() circBufPop_CMockIgnoreArg_c(__LINE__)
void circBufPop_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define circBufPop_IgnoreArg_data() circBufPop_CMockIgnoreArg_data(__LINE__)
void circBufPop_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
