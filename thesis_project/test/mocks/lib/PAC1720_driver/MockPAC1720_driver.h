/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKPAC1720_DRIVER_H
#define _MOCKPAC1720_DRIVER_H

#include "unity.h"
#include "lib/PAC1720_driver/PAC1720_driver.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockPAC1720_driver_Init(void);
void MockPAC1720_driver_Destroy(void);
void MockPAC1720_driver_Verify(void);




#define init_device_PAC1720_IgnoreAndReturn(cmock_retval) init_device_PAC1720_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void init_device_PAC1720_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int8_t cmock_to_return);
#define init_device_PAC1720_ExpectAnyArgsAndReturn(cmock_retval) init_device_PAC1720_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void init_device_PAC1720_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int8_t cmock_to_return);
#define init_device_PAC1720_ExpectAndReturn(device_ptr, cmock_retval) init_device_PAC1720_CMockExpectAndReturn(__LINE__, device_ptr, cmock_retval)
void init_device_PAC1720_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct PAC1720_device* device_ptr, int8_t cmock_to_return);
typedef int8_t (* CMOCK_init_device_PAC1720_CALLBACK)(struct PAC1720_device* device_ptr, int cmock_num_calls);
void init_device_PAC1720_StubWithCallback(CMOCK_init_device_PAC1720_CALLBACK Callback);
#define init_device_PAC1720_ExpectAndThrow(device_ptr, cmock_to_throw) init_device_PAC1720_CMockExpectAndThrow(__LINE__, device_ptr, cmock_to_throw)
void init_device_PAC1720_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, struct PAC1720_device* device_ptr, CEXCEPTION_T cmock_to_throw);
#define init_device_PAC1720_ExpectWithArrayAndReturn(device_ptr, device_ptr_Depth, cmock_retval) init_device_PAC1720_CMockExpectWithArrayAndReturn(__LINE__, device_ptr, device_ptr_Depth, cmock_retval)
void init_device_PAC1720_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct PAC1720_device* device_ptr, int device_ptr_Depth, int8_t cmock_to_return);
#define init_device_PAC1720_ReturnThruPtr_device_ptr(device_ptr) init_device_PAC1720_CMockReturnMemThruPtr_device_ptr(__LINE__, device_ptr, sizeof(*device_ptr))
#define init_device_PAC1720_ReturnArrayThruPtr_device_ptr(device_ptr, cmock_len) init_device_PAC1720_CMockReturnMemThruPtr_device_ptr(__LINE__, device_ptr, (int)(cmock_len * (int)sizeof(*device_ptr)))
#define init_device_PAC1720_ReturnMemThruPtr_device_ptr(device_ptr, cmock_size) init_device_PAC1720_CMockReturnMemThruPtr_device_ptr(__LINE__, device_ptr, cmock_size)
void init_device_PAC1720_CMockReturnMemThruPtr_device_ptr(UNITY_LINE_TYPE cmock_line, struct PAC1720_device* device_ptr, int cmock_size);
#define init_device_PAC1720_IgnoreArg_device_ptr() init_device_PAC1720_CMockIgnoreArg_device_ptr(__LINE__)
void init_device_PAC1720_CMockIgnoreArg_device_ptr(UNITY_LINE_TYPE cmock_line);
#define get_TEST_DRIVER_FPTR_FIELD_IgnoreAndReturn(cmock_retval) get_TEST_DRIVER_FPTR_FIELD_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void get_TEST_DRIVER_FPTR_FIELD_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const void* cmock_to_return);
#define get_TEST_DRIVER_FPTR_FIELD_ExpectAnyArgsAndReturn(cmock_retval) get_TEST_DRIVER_FPTR_FIELD_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void get_TEST_DRIVER_FPTR_FIELD_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, const void* cmock_to_return);
#define get_TEST_DRIVER_FPTR_FIELD_ExpectAndReturn(cmock_retval) get_TEST_DRIVER_FPTR_FIELD_CMockExpectAndReturn(__LINE__, cmock_retval)
void get_TEST_DRIVER_FPTR_FIELD_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const void* cmock_to_return);
typedef const void* (* CMOCK_get_TEST_DRIVER_FPTR_FIELD_CALLBACK)(int cmock_num_calls);
void get_TEST_DRIVER_FPTR_FIELD_StubWithCallback(CMOCK_get_TEST_DRIVER_FPTR_FIELD_CALLBACK Callback);
#define get_TEST_DRIVER_FPTR_FIELD_ExpectAndThrow(cmock_to_throw) get_TEST_DRIVER_FPTR_FIELD_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void get_TEST_DRIVER_FPTR_FIELD_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
