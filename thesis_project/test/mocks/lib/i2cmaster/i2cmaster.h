/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _I2CMASTER_H
#define _I2CMASTER_H

#include "unity.h"
#include "i2cmaster.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mocki2cmaster_Init(void);
void Mocki2cmaster_Destroy(void);
void Mocki2cmaster_Verify(void);




#define i2c_disable_Expect() i2c_disable_CMockExpect(__LINE__)
void i2c_disable_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define i2c_enable_Expect() i2c_enable_CMockExpect(__LINE__)
void i2c_enable_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define i2c_status_ExpectAndReturn(cmock_retval) i2c_status_CMockExpectAndReturn(__LINE__, cmock_retval)
void i2c_status_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define i2c_start_nonblocking_Expect() i2c_start_nonblocking_CMockExpect(__LINE__)
void i2c_start_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define i2c_write_nonblocking_Expect(data) i2c_write_nonblocking_CMockExpect(__LINE__, data)
void i2c_write_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line, unsigned char data);
#define i2c_readAck_nonblocking_Expect() i2c_readAck_nonblocking_CMockExpect(__LINE__)
void i2c_readAck_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define i2c_readNak_nonblocking_Expect() i2c_readNak_nonblocking_CMockExpect(__LINE__)
void i2c_readNak_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define i2c_stop_nonblocking_Expect() i2c_stop_nonblocking_CMockExpect(__LINE__)
void i2c_stop_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define i2c_getData_ExpectAndReturn(cmock_retval) i2c_getData_CMockExpectAndReturn(__LINE__, cmock_retval)
void i2c_getData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
