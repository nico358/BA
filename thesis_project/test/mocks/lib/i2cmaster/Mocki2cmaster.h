/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKI2CMASTER_H
#define _MOCKI2CMASTER_H

#include "unity.h"
// #include "lib/i2cmaster/i2cmaster.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mocki2cmaster_Init(void);
void Mocki2cmaster_Destroy(void);
void Mocki2cmaster_Verify(void);




#define i2c_disable_Ignore() i2c_disable_CMockIgnore()
void i2c_disable_CMockIgnore(void);
#define i2c_disable_ExpectAnyArgs() i2c_disable_CMockExpectAnyArgs(__LINE__)
void i2c_disable_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define i2c_disable_Expect() i2c_disable_CMockExpect(__LINE__)
void i2c_disable_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_i2c_disable_CALLBACK)(int cmock_num_calls);
void i2c_disable_StubWithCallback(CMOCK_i2c_disable_CALLBACK Callback);
#define i2c_disable_ExpectAndThrow(cmock_to_throw) i2c_disable_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void i2c_disable_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define i2c_enable_Ignore() i2c_enable_CMockIgnore()
void i2c_enable_CMockIgnore(void);
#define i2c_enable_ExpectAnyArgs() i2c_enable_CMockExpectAnyArgs(__LINE__)
void i2c_enable_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define i2c_enable_Expect() i2c_enable_CMockExpect(__LINE__)
void i2c_enable_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_i2c_enable_CALLBACK)(int cmock_num_calls);
void i2c_enable_StubWithCallback(CMOCK_i2c_enable_CALLBACK Callback);
#define i2c_enable_ExpectAndThrow(cmock_to_throw) i2c_enable_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void i2c_enable_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define i2c_status_IgnoreAndReturn(cmock_retval) i2c_status_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2c_status_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define i2c_status_ExpectAnyArgsAndReturn(cmock_retval) i2c_status_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void i2c_status_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define i2c_status_ExpectAndReturn(cmock_retval) i2c_status_CMockExpectAndReturn(__LINE__, cmock_retval)
void i2c_status_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_i2c_status_CALLBACK)(int cmock_num_calls);
void i2c_status_StubWithCallback(CMOCK_i2c_status_CALLBACK Callback);
#define i2c_status_ExpectAndThrow(cmock_to_throw) i2c_status_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void i2c_status_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define i2c_start_nonblocking_Ignore() i2c_start_nonblocking_CMockIgnore()
void i2c_start_nonblocking_CMockIgnore(void);
#define i2c_start_nonblocking_ExpectAnyArgs() i2c_start_nonblocking_CMockExpectAnyArgs(__LINE__)
void i2c_start_nonblocking_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define i2c_start_nonblocking_Expect() i2c_start_nonblocking_CMockExpect(__LINE__)
void i2c_start_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_i2c_start_nonblocking_CALLBACK)(int cmock_num_calls);
void i2c_start_nonblocking_StubWithCallback(CMOCK_i2c_start_nonblocking_CALLBACK Callback);
#define i2c_start_nonblocking_ExpectAndThrow(cmock_to_throw) i2c_start_nonblocking_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void i2c_start_nonblocking_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define i2c_write_nonblocking_Ignore() i2c_write_nonblocking_CMockIgnore()
void i2c_write_nonblocking_CMockIgnore(void);
#define i2c_write_nonblocking_ExpectAnyArgs() i2c_write_nonblocking_CMockExpectAnyArgs(__LINE__)
void i2c_write_nonblocking_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define i2c_write_nonblocking_Expect(data) i2c_write_nonblocking_CMockExpect(__LINE__, data)
void i2c_write_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line, unsigned char data);
typedef void (* CMOCK_i2c_write_nonblocking_CALLBACK)(unsigned char data, int cmock_num_calls);
void i2c_write_nonblocking_StubWithCallback(CMOCK_i2c_write_nonblocking_CALLBACK Callback);
#define i2c_write_nonblocking_ExpectAndThrow(data, cmock_to_throw) i2c_write_nonblocking_CMockExpectAndThrow(__LINE__, data, cmock_to_throw)
void i2c_write_nonblocking_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, unsigned char data, CEXCEPTION_T cmock_to_throw);
#define i2c_write_nonblocking_IgnoreArg_data() i2c_write_nonblocking_CMockIgnoreArg_data(__LINE__)
void i2c_write_nonblocking_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define i2c_readAck_nonblocking_Ignore() i2c_readAck_nonblocking_CMockIgnore()
void i2c_readAck_nonblocking_CMockIgnore(void);
#define i2c_readAck_nonblocking_ExpectAnyArgs() i2c_readAck_nonblocking_CMockExpectAnyArgs(__LINE__)
void i2c_readAck_nonblocking_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define i2c_readAck_nonblocking_Expect() i2c_readAck_nonblocking_CMockExpect(__LINE__)
void i2c_readAck_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_i2c_readAck_nonblocking_CALLBACK)(int cmock_num_calls);
void i2c_readAck_nonblocking_StubWithCallback(CMOCK_i2c_readAck_nonblocking_CALLBACK Callback);
#define i2c_readAck_nonblocking_ExpectAndThrow(cmock_to_throw) i2c_readAck_nonblocking_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void i2c_readAck_nonblocking_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define i2c_readNak_nonblocking_Ignore() i2c_readNak_nonblocking_CMockIgnore()
void i2c_readNak_nonblocking_CMockIgnore(void);
#define i2c_readNak_nonblocking_ExpectAnyArgs() i2c_readNak_nonblocking_CMockExpectAnyArgs(__LINE__)
void i2c_readNak_nonblocking_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define i2c_readNak_nonblocking_Expect() i2c_readNak_nonblocking_CMockExpect(__LINE__)
void i2c_readNak_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_i2c_readNak_nonblocking_CALLBACK)(int cmock_num_calls);
void i2c_readNak_nonblocking_StubWithCallback(CMOCK_i2c_readNak_nonblocking_CALLBACK Callback);
#define i2c_readNak_nonblocking_ExpectAndThrow(cmock_to_throw) i2c_readNak_nonblocking_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void i2c_readNak_nonblocking_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define i2c_stop_nonblocking_Ignore() i2c_stop_nonblocking_CMockIgnore()
void i2c_stop_nonblocking_CMockIgnore(void);
#define i2c_stop_nonblocking_ExpectAnyArgs() i2c_stop_nonblocking_CMockExpectAnyArgs(__LINE__)
void i2c_stop_nonblocking_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define i2c_stop_nonblocking_Expect() i2c_stop_nonblocking_CMockExpect(__LINE__)
void i2c_stop_nonblocking_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_i2c_stop_nonblocking_CALLBACK)(int cmock_num_calls);
void i2c_stop_nonblocking_StubWithCallback(CMOCK_i2c_stop_nonblocking_CALLBACK Callback);
#define i2c_stop_nonblocking_ExpectAndThrow(cmock_to_throw) i2c_stop_nonblocking_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void i2c_stop_nonblocking_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define i2c_getData_IgnoreAndReturn(cmock_retval) i2c_getData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2c_getData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define i2c_getData_ExpectAnyArgsAndReturn(cmock_retval) i2c_getData_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void i2c_getData_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define i2c_getData_ExpectAndReturn(cmock_retval) i2c_getData_CMockExpectAndReturn(__LINE__, cmock_retval)
void i2c_getData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_i2c_getData_CALLBACK)(int cmock_num_calls);
void i2c_getData_StubWithCallback(CMOCK_i2c_getData_CALLBACK Callback);
#define i2c_getData_ExpectAndThrow(cmock_to_throw) i2c_getData_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void i2c_getData_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
