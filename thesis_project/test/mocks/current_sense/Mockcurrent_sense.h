/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCURRENT_SENSE_H
#define _MOCKCURRENT_SENSE_H

#include "unity.h"
#include "current_sense.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcurrent_sense_Init(void);
void Mockcurrent_sense_Destroy(void);
void Mockcurrent_sense_Verify(void);




#define initCurrentSense_Expect() initCurrentSense_CMockExpect(__LINE__)
void initCurrentSense_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define currentSenseConfig_Expect() currentSenseConfig_CMockExpect(__LINE__)
void currentSenseConfig_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define currentSensePushMeasurements_Expect(push) currentSensePushMeasurements_CMockExpect(__LINE__, push)
void currentSensePushMeasurements_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t push);
#define findCurrentSensors_Expect() findCurrentSensors_CMockExpect(__LINE__)
void findCurrentSensors_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define currentSenseCount_ExpectAndReturn(cmock_retval) currentSenseCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void currentSenseCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define currentSenseBegin_Expect() currentSenseBegin_CMockExpect(__LINE__)
void currentSenseBegin_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define currentSenseEnd_Expect() currentSenseEnd_CMockExpect(__LINE__)
void currentSenseEnd_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define currentSenseTask_ExpectAndReturn(cmock_retval) currentSenseTask_CMockExpectAndReturn(__LINE__, cmock_retval)
void currentSenseTask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define getAddress_ExpectAndReturn(device, cmock_retval) getAddress_CMockExpectAndReturn(__LINE__, device, cmock_retval)
void getAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t device, uint8_t cmock_to_return);
#define writeRegister_Expect(address, register_address, value) writeRegister_CMockExpect(__LINE__, address, register_address, value)
void writeRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t address, uint8_t register_address, uint8_t value);
#define currentSenseClearMeasurements_Expect() currentSenseClearMeasurements_CMockExpect(__LINE__)
void currentSenseClearMeasurements_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define printAccID_Expect() printAccID_CMockExpect(__LINE__)
void printAccID_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define printCurrentProductId_Expect(address) printCurrentProductId_CMockExpect(__LINE__, address)
void printCurrentProductId_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t address);
#define currentSenseConvert_ExpectAndReturn(device, sense, cmock_retval) currentSenseConvert_CMockExpectAndReturn(__LINE__, device, sense, cmock_retval)
void currentSenseConvert_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t device, uint16_t sense, float cmock_to_return);
#define printCurrent_Expect(device) printCurrent_CMockExpect(__LINE__, device)
void printCurrent_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t device);
#define printAccelerometerValues_Expect() printAccelerometerValues_CMockExpect(__LINE__)
void printAccelerometerValues_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define readCurrentSense_ExpectAndReturn(address, channel, cmock_retval) readCurrentSense_CMockExpectAndReturn(__LINE__, address, channel, cmock_retval)
void readCurrentSense_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t address, uint8_t channel, uint16_t cmock_to_return);
#define readCurrentSenseBlocking_ExpectAndReturn(address, channel, cmock_retval) readCurrentSenseBlocking_CMockExpectAndReturn(__LINE__, address, channel, cmock_retval)
void readCurrentSenseBlocking_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t address, uint8_t channel, uint16_t cmock_to_return);
#define printCurrentSense_Expect(address, channel) printCurrentSense_CMockExpect(__LINE__, address, channel)
void printCurrentSense_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t address, uint8_t channel);
#define printCurrentMeasurement_Expect(c) printCurrentMeasurement_CMockExpect(__LINE__, c)
void printCurrentMeasurement_CMockExpect(UNITY_LINE_TYPE cmock_line, currentMeasurement c);
#define printCurrentMeasurementFloat_Expect(c) printCurrentMeasurementFloat_CMockExpect(__LINE__, c)
void printCurrentMeasurementFloat_CMockExpect(UNITY_LINE_TYPE cmock_line, currentMeasurementFloat c);
#define printAllCurrentMeasurementsFloat_Expect() printAllCurrentMeasurementsFloat_CMockExpect(__LINE__)
void printAllCurrentMeasurementsFloat_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define fetchCurrent_ExpectAndReturn(device, cmock_retval) fetchCurrent_CMockExpectAndReturn(__LINE__, device, cmock_retval)
void fetchCurrent_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t device, float cmock_to_return);
#define fetchCurrentMeasurementFloat_ExpectAndReturn(cmock_retval) fetchCurrentMeasurementFloat_CMockExpectAndReturn(__LINE__, cmock_retval)
void fetchCurrentMeasurementFloat_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, currentMeasurementFloat cmock_to_return);
#define currentSenseStartAll_Expect() currentSenseStartAll_CMockExpect(__LINE__)
void currentSenseStartAll_CMockExpect(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
