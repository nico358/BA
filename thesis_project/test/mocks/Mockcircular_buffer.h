/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCIRCULAR_BUFFER_H
#define _MOCKCIRCULAR_BUFFER_H

#include "unity.h"
#include "circular_buffer.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcircular_buffer_Init(void);
void Mockcircular_buffer_Destroy(void);
void Mockcircular_buffer_Verify(void);




#define circBufInit_Expect(c, size) circBufInit_CMockExpect(__LINE__, c, size)
void circBufInit_CMockExpect(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t size);
#define circBufFree_Expect(c) circBufFree_CMockExpect(__LINE__, c)
void circBufFree_CMockExpect(UNITY_LINE_TYPE cmock_line, circularBuffer* c);
#define circBufSpace_ExpectAndReturn(c, cmock_retval) circBufSpace_CMockExpectAndReturn(__LINE__, c, cmock_retval)
void circBufSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t cmock_to_return);
#define circBufCount_ExpectAndReturn(c, cmock_retval) circBufCount_CMockExpectAndReturn(__LINE__, c, cmock_retval)
void circBufCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t cmock_to_return);
#define circBufCountObjects_ExpectAndReturn(c, size, cmock_retval) circBufCountObjects_CMockExpectAndReturn(__LINE__, c, size, cmock_retval)
void circBufCountObjects_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint16_t size, uint16_t cmock_to_return);
#define circBufPush_ExpectAndReturn(c, data, cmock_retval) circBufPush_CMockExpectAndReturn(__LINE__, c, data, cmock_retval)
void circBufPush_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint8_t data, uint8_t cmock_to_return);
#define circBufPop_ExpectAndReturn(c, data, cmock_retval) circBufPop_CMockExpectAndReturn(__LINE__, c, data, cmock_retval)
void circBufPop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, circularBuffer* c, uint8_t* data, uint8_t cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
